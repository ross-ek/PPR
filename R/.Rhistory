install.packages('shiny','leaflet','tidyverse')
install.packages(shiny)
install.packages("shiny")
install.packages('leaflet')
install.packages('tidyverse')
runApp()
library(shiny)
library(leaflet)
library(dplyr)
runApp()
getwd()
setwd("~/dcu/CA682/PPR/r")
runApp()
runApp()
runApp()
df = read.csv("./NYPD_7_Major_Felony_Incidents_3.csv", stringsAsFactors = F)
View(df)
df <- tidyr::separate(data=df,
col=Location.1,
into=c("Latitude", "Longitude"),
sep=",",
remove=FALSE)
df$Latitude <- stringr::str_replace_all(df$Latitude, "[(]", "")
df$Longitude <- stringr::str_replace_all(df$Longitude, "[)]", "")
df$Latitude <- as.numeric(df$Latitude)
df$Longitude <- as.numeric(df$Longitude)
sample_data <- df[c(1:1000),]
saveRDS(sample_data, "./sample_data.rds")
library(leaflet)
library(dplyr)
leafletOutput("mymap",height = 1000)
appRun()
library(shiny)
runApp()
runApp()
runApp()
View(df)
runApp()
install.packages('rgdal')
library(rgdal)
eircode_boundaries <- readOGR("../shp/RoutingKeys_WGS84_region.shp")
eircode_boundaries <- readOGR("../shp/RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
)
# Shape Files
# https://www.autoaddress.ie/support/developer-centre/resources/routing-key-boundaries
eircode_boundaries <- readOGR("../shp/RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
getwd()
eircode_boundaries <- readOGR("RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR("./RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
list.files()
eircode_boundaries <- readOGR("RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="RoutingKeys_WGS84_region.shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn=path.expand("RoutingKeys_WGS84_region.shp"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
path.expand("RoutingKeys_WGS84_region.shp")
path.expand("RoutingKeys_WGS84_region.shfp")
getwd()
eircode_boundaries <- readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r/RoutingKeys_WGS84_region.shp"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r/RoutingKeys_WGS84_region.shp"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
shp_path = "C:/Users/ross_/Documents/dcu/CA682/PPR/r/RoutingKeys_WGS84_region.shp"
x <- read.csv(shp_path)
readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r/RoutingKeys_WGS84_region.shp"),
)
readOGR(shp_path)
shp_path =
readOGR("C:/Users/ross_/Documents/dcu/CA682/PPR/r/","RoutingKeys_WGS84_region.shp" )
shp_path =
readOGR("C:/Users/ross_/Documents/dcu/CA682/PPR/r/","RoutingKeys_WGS84_region" )
shp_path =
readOGR("C:/Users/ross_/Documents/dcu/CA682/PPR/r","RoutingKeys_WGS84_region" )
shp_path =
readOGR("C:/Users/ross_/Documents/dcu/CA682/PPR/r",
layer="RoutingKeys_WGS84_region")
eircode_boundaries <- readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn=path.expand("C:/Users/ross_/Documents/dcu/CA682/PPR/r"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn=path.expand("shp"),
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp",
layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp", layer="cb_2017_us_state_20m.shp",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp", layer="cb_2017_us_state_20m",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
library(leaflet)
leaflet(neStates) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
dub_codes <- c('D18','D16')
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
neStates <- subset(eircode_boundaries, eircode_boundaries$STUSPS %in% c(
"D16","D18"
))
dub_codes <- subset(eircode_boundaries, eircode_boundaries$STUSPS %in% c(
"D16","D18"
))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region",
GDAL1_integer64_policy = TRUE)
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region")
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region")
eircode_boundaries$STUSPS
eircode_boundaries
eircode_boundaries.head(15)
head(eircode_boundaries,15)
eircode_boundaries <- readOGR(dsn="shp", layer="RoutingKeys_WGS84_region")
dub_codes <- subset(eircode_boundaries, eircode_boundaries$RoutingKey %in% c(
"D16","D18"
))
dub_codes
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
dub_codes <- subset(eircode_boundaries, eircode_boundaries$RoutingKey %in% c(
"D01","D02",'D03','D04','D05','D06','D07','D08','D09','D10','D11','D12'
))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 1,
bringToFront = TRUE))
dub_codes <- subset(eircode_boundaries, eircode_boundaries$RoutingKey %in% c(
"D01","D02",'D03','D04','D05','D06','D07','D08','D09','D10','D11','D12',
'D13','D14','D15','D16','D17','D18','D19','D20','D21','D22'
))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 1,
bringToFront = TRUE))
dub_codes <- subset(eircode_boundaries, eircode_boundaries$RoutingKey %in% c(
'Y14','A84','H65','N37','R14','K32','F26','H53','P31','F31','A41','F35','F56','P72','P75','H14','R42','A94','F52','A98','V23','E21','R93',
'A81','N41','E32','P43','E25','F23','A75','F45','H12','P56','F12','H71','P85','H23','E91','P24','H16','T12','T23','P14','P32','P47','T56',
'T34','R56','F94','A92','D01','D02','D03','D04','D05','D06','D6W','D07','D08','D09','D10','D11','D12','D13','D14','D15','D16','D17','D18',
'D20','D22','D24','A86','A91','X35','A85','R45','A83','V95','Y21','P61','H91','A42','A96','Y25','A63','A82','R51','R95','V93','X42','V35',
'V15','P17','F92','F93','V94','V31','T45','N39','H62','K78','K45','P12','K36','P51','W23','P25','P67','H18','W34','R21','N91','W91','C15',
'E45','Y34','W12','V42','A45','R32','F42','E53','K56','V14','K34','P81','F91','K67','E41','E34','V92','H54','R35','X91','F28','Y35','A67'
,'P36'
))
leaflet(dub_codes) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 1,
bringToFront = TRUE))
